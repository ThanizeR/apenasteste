import streamlit as st
import numpy as np
from PIL import Image
from keras.models import load_model
import pandas as pd
from sklearn.ensemble._forest import ForestClassifier, ForestRegressor
import pickle
from PIL import Image
import tensorflow as tf
from streamlit_option_menu import option_menu
import os

def predict_malaria(img):
    img = img.resize((36,36))
    img = np.asarray(img)
    img = img.reshape((1,36,36,3))
    img = img.astype(np.float64)
    model = load_model("Streamlit /malaria.h5")
    pred_probs = model.predict(img)[0]
    pred_class = np.argmax(pred_probs)
    pred_prob = pred_probs[pred_class]
    return pred_class, pred_prob

def predict_pneumonia(img):
    img = img.convert('L')
    img = img.resize((36,36))
    img = np.asarray(img)
    img = img.reshape((1,36,36,1))
    img = img / 255.0
    model = load_model("Streamlit /pneumonia.h5")
    pred_probs = model.predict(img)[0]
    pred_class = np.argmax(pred_probs)
    pred_prob = pred_probs[pred_class]
    return pred_class, pred_prob


with open('/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/ComparacaoFrameworks/Comparacao/Streamlit /diabetes_model.sav', 'rb') as file:
    diabetes_model = pickle.load(file)

#logo = Image.open("/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/logo/MediScan.png")
# Cria√ß√£o de uma sidebar personalizada com √≠cones redondos
#st.sidebar.image(logo, use_column_width=True)
st.sidebar.title("Menu")

menu = st.sidebar.radio(
    "Navega√ß√£o",
    ["üè† P√°gina Inicial", "ü¶ü Detec√ß√£o Malaria", " ü´Å Detec√ß√£o Pneumonia", "üíâ Detec√ß√£o Diabetes", "üìä Datasets Dispon√≠veis"]
)
# Fun√ß√£o para mapear sele√ß√£o de menu para p√°gina correspondente
def get_selected_page(menu):
    if menu == "üè† P√°gina Inicial":
        return "home"
    elif menu == "ü¶ü Detec√ß√£o Malaria":
        return "Malaria"
    elif menu == " ü´Å Detec√ß√£o Pneumonia":
        return "Pneumonia"
    elif menu == "üíâ Detec√ß√£o Diabetes":
        return "Diabetes"
    elif menu == "üìä Datasets Dispon√≠veis":
        return "Datasets"
    
selected_page = get_selected_page(menu)


def main(selected_page):
    # Conte√∫do da p√°gina selecionada
    if selected_page == "home":
        st.title('Bem-vindo √† Aplica√ß√£o de Previs√£o de Anomalias M√©dicas')
        st.write("Este √© um projeto de previs√£o de diversas anomalias m√©dicas usando modelos de deep learning e machine learning.")

        st.write("√â importante observar que os modelos utilizados nesta aplica√ß√£o foram obtidos de reposit√≥rios p√∫blicos na internet e, portanto, sua confiabilidade pode variar.")

        st.write("Embora tenham sido treinados em grandes conjuntos de dados m√©dicos, √© fundamental lembrar que todas as previs√µes devem ser verificadas por profissionais de sa√∫de qualificados.")

        # Se√ß√£o de Perguntas Frequentes
        st.subheader("Perguntas Frequentes")

        # Lista de perguntas frequentes e respostas
        faq = [
            {
                "pergunta": "Como a previs√£o de anomalias √© feita?",
                "resposta": "A detec√ß√£o de pneumonia e mal√°ria √© feita usando uma rede neural convolucional (CNN), enquanto a se√ß√£o de diabetes √© detectada por um modelo Random Forest",
            },
            {
                "pergunta": "Os modelos s√£o precisos?",
                "resposta": "Os modelos foram treinados em grandes conjuntos de dados m√©dicos, mas lembre-se de que todas as previs√µes devem ser verificadas por profissionais de sa√∫de qualificados.",
            },
            {
                "pergunta": "Qual √© o prop√≥sito desta aplica√ß√£o?",
                "resposta": "Esta aplica√ß√£o foi desenvolvida para auxiliar na detec√ß√£o de diversas anomalias m√©dicas em imagens de diferentes partes do corpo.",
            },
            {
                "pergunta": "Quais tipos de anomalias m√©dicas podem ser detectadas?",
                "resposta": "Os modelos podem detectar v√°rias anomalias, incluindo pneumonia, mal√°ria e diabetes.",
            },
            
        ]

        # Exibi√ß√£o das perguntas frequentes
        for item in faq:
            with st.expander(item["pergunta"]):
                st.write(item["resposta"])


    elif selected_page ==  "Malaria":
        st.header("Previs√£o de Mal√°ria")
        uploaded_file = st.file_uploader("Fa√ßa o upload de uma imagem para previs√£o de mal√°ria", type=["jpg", "jpeg", "png"])
        
        if uploaded_file is not None:
            try:
                img = Image.open(uploaded_file)
                st.image(img, caption="Imagem enviada", use_column_width=True)
                pred_class, pred_prob = predict_malaria(img)
                
                if pred_class == 1:
                    st.write("Previs√£o: Infectado")
                    st.write(f"Probabilidade de Mal√°ria: {pred_prob * 100:.2f}%")
                else:
                    st.write("Previs√£o: N√£o est√° infectado")
                    st.write(f"Probabilidade de Sa√∫de: {pred_prob * 100:.2f}%")
                    
            except Exception as e:
                st.error(f"Erro ao prever Mal√°ria: {str(e)}")

    elif selected_page ==  "Pneumonia":
        st.header("Previs√£o de Pneumonia")
        uploaded_file = st.file_uploader("Fa√ßa o upload de uma imagem para previs√£o de pneumonia", type=["jpg", "jpeg", "png"])
        
        if uploaded_file is not None:
            try:
                img = Image.open(uploaded_file)
                st.image(img, caption="Imagem enviada", use_column_width=True)
                pred_class, pred_prob = predict_pneumonia(img)
                
                if pred_class == 1:
                    st.write("Previs√£o: Pneumonia")
                    st.write(f"Probabilidade de Pneumonia: {pred_prob * 100:.2f}%")
                else:
                    st.write("Previs√£o: Saud√°vel")
                    st.write(f"Probabilidade de Sa√∫de: {pred_prob * 100:.2f}%")
                    
            except Exception as e:
                st.error(f"Erro ao prever Pneumonia: {str(e)}")

    elif selected_page ==  "Diabetes":
        # T√≠tulo da p√°gina
        st.title('Previs√£o de Diabetes')

        # obtendo os dados de entrada do usu√°rio
        col1, col2, col3 = st.columns(3)

        with col1:
            Pregnancies = st.text_input('N√∫mero de Gesta√ß√µes')

        with col2:
            Glucose = st.text_input('N√≠vel de Glicose')

        with col3:
            BloodPressure = st.text_input('Valor da Press√£o Arterial')

        with col1:
            SkinThickness = st.text_input('Valor da Espessura da Pele')

        with col2:
            Insulin = st.text_input('N√≠vel de Insulina')

        with col3:
            BMI = st.text_input('Valor do IMC')

        with col1:
            DiabetesPedigreeFunction = st.text_input('Valor da Fun√ß√£o de Pedigree de Diabetes')

        with col2:
            Age = st.text_input('Idade da Pessoa')


        # c√≥digo para previs√£o
        diab_diagnosis = ''

        # criando um bot√£o para previs√£o

        if st.button('Resultado do Teste de Diabetes'):

            user_input = [Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin,
                        BMI, DiabetesPedigreeFunction, Age]

            user_input = [float(x) for x in user_input]

            diab_prediction = diabetes_model.predict([user_input])

            if diab_prediction[0] == 1:
                diab_diagnosis = 'A pessoa √© diab√©tica'
            else:
                diab_diagnosis = 'A pessoa n√£o √© diab√©tica'

        st.success(diab_diagnosis)

    elif selected_page == "Datasets":
        # T√≠tulo da p√°gina
        st.title('Datasets Dispon√≠veis')
        # Introdu√ß√£o
        st.write("Esta p√°gina cont√©m links para download e visualiza√ß√£o de datasets utilizados na aplica√ß√£o.")
        
        # Dicion√°rio com URLs dos datasets
        datasets = {
            "Dataset de Mal√°ria": "https://www.kaggle.com/datasets/iarunava/cell-images-for-detecting-malaria",
            "Dataset de Pneumonia": "https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia",
            "Dataset de Doen√ßas Card√≠acas": "https://github.com/siddhardhan23/multiple-disease-prediction-streamlit-app/blob/main/dataset/heart.csv",
            "Dataset de Doen√ßas Renais": "https://www.kaggle.com/datasets/mansoordaku/ckdisease",
            "Dataset de Diabetes": "https://github.com/siddhardhan23/multiple-disease-prediction-streamlit-app/blob/main/dataset/diabetes.csv",
            "Dataset de Doen√ßas Hep√°ticas": "https://www.kaggle.com/datasets/uciml/indian-liver-patient-records",
            "Dataset de C√¢ncer de Mama": "https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data"
        }

        # Loop sobre os datasets para exibir links de download e bot√µes para visualiza√ß√£o
        for dataset_name, dataset_url in datasets.items():
            st.write(f"**{dataset_name}:**")
            st.markdown(f"[Download {dataset_name}]({dataset_url})")

if __name__ == "__main__":
    main(selected_page)
